name: Node.js CI

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  test:
    runs-on: ubuntu-latest   
    strategy:
      matrix:
        node-version: [12.x]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Install dependencies, run tests & build
      run: |
        npm ci
        npm test
    env:
      CI: true
      
      
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        npm ci

# In case of error, check out
# https://github.com/actions/cache/blob/master/examples.md#node---npm
    - name: Cache node_modules
      uses: actions/cache@v2.1.1
      with:
        path: |
          **/node_modules
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
  
    - name: Build
      run: npm run build --if-present
    - name: Archive production build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build_files
        path: | 
          build

  deployment:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
    - 
      name: Fetch build files
      uses: actions/download-artifact@v2
      with:
        name: build_files
        path: ./build/
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1 
    -
      name: Login to Dockerhub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - 
      name: Push build
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ./Dockerfile.prod
        push: true
        tags: devopsdemo:latest
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

    # - name: deploy
    #   uses: garygrossgarten/github-action-scp@release
    #   with:
    #     local: ./build
    #     remote: /var/www/dev
    #     host: ${{ secrets.HOST }}
    #     username: ${{ secrets.SSH_USER }}
    #     password: ${{ secrets.SSH_USER_PASS }}

  # deployment:
  #   runs-on: ubuntu-latest
  #   needs: [build, test]
  #   steps:
  #   - name: Fetch build files
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: build_files
  #       path: ./build
  #   - name: print build dir
  #     run: |
  #       ls -la
  #       pwd
  #   - name: deploy
  #     uses: appleboy/scp-action@master
  #     with:
  #       debug: true
  #       host: ${{ secrets.HOST }}
  #       username: ${{ secrets.SSH_USER }}
  #       password: ${{ secrets.SSH_USER_PASS }}
  #       source: "/home/runner/work/DevOps-demo/DevOps-demo/build"
  #       target: "/var/www/dev"
#
#    - uses: actions/scp-action@master
#      if: github.ref == 'refs/heads/main'
#      with:
#        host: ${{ secrets.HOST }}
#        username: ${{ secrets.SSH_USER }}
#        password: ${{ secrets.SSH_USER_PASS }}
#        source: "./build/*"
#        target: /var/www/prod
#
#      uses: 
#      - name: Deploy production
#        if: github.ref == 'refs/heads/main'
#        run: |
#          cd build/
#          sshpass -V
#          export SSHPASS=${{ secrets.SSH_USER_PASS }}
#          sshpass -e scp -o stricthostkeychecking=no -r * hackerman@95.217.186.152:/var/www/prod
#
#      - name: Deploy dev
#        if: github.ref == 'refs/heads/development'
#        run: |
#          cd build/
#          sshpass -V
#          export SSHPASS=${{ secrets.SSH_USER_PASS }}
#          sshpass -e scp -o stricthostkeychecking=no -r * hackerman@95.217.186.152:/var/www/dev
